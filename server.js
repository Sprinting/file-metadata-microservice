 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';
var dotenv = require('dotenv').config()
var fs = require('fs');
var express = require('express');
var app = express();
var router = express.Router();
var multer = require('multer');

const multer_storage = multer.diskStorage({
  'destination':'public/uploads',
  filename : function(req,file,cb){
    cb(null,Date.now()+"_"+file.originalname)
  }
})


var uploader = multer({ storage: multer_storage })
var serveIndex = require('serve-index')
var findRemoveSync = require('find-remove');

const route ='api/fileanalyse'
const seconds_to_age = process.env.UPLOADED_FILE_MAX_AGE_IN_SECONDS
const time_interval = process.env.FILE_SCANNER__RUN_FREQ_IN_MILISECONDS*1000
const findRemoveSyncAndLog = (dirname,options)=>{
  console.log("Trying to remove files")
  let result = findRemoveSync(dirname, options);
  console.log(result)
  return result
}

setInterval(findRemoveSyncAndLog.bind(this, __dirname + '/public/uploads', {files:"*.*"}), time_interval)


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}
app.use('/public', express.static(process.cwd() + '/public'));
app.set("views",__dirname+"/views")
app.set("view engine","pug")
app.route('/')
    .get(function(req, res) {
  	  res.render("index",{"files":'/files',"route":route})
      console.log(route)
})

// app.route('/_api/package.json')
//   .get(function(req, res, next) {
//     console.log('requested');
//     fs.readFile(__dirname + '/package.json', function(err, data) {
//       if(err) return next(err);
//       res.type('txt').send(data.toString());
//     });
//   });
app.use('/files', serveIndex('public/uploads', {'icons': true}))
router.post('/'+route,uploader.single('upfile'),function(req,res){
  res.json({"size":req.file.size,
            "mimetype":req.file.mimetype,
           "encoding":req.file.encoding,
            "path":'files/'+req.file.filename,
            "name":req.file.filename.split("_")[1]
           })
})


router.get('/files/:filename',function(req,res){
  const filepath = __dirname+'/public/uploads/'+req.params.filename
  console.log(filepath)
  if(require('fs').existsSync(filepath))
    {
      res.sendFile(filepath)
    }
  else{
    
    res.send(require('fs').existsSync(filepath))
  }
})
app.use('/', router)

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});


// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

